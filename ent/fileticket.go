// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"nest/ent/fileticket"
	"nest/ent/host"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// FileTicket is the model entity for the FileTicket schema.
type FileTicket struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// OriginalFilename holds the value of the "original_filename" field.
	OriginalFilename string `json:"original_filename,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileTicketQuery when eager-loading is set.
	Edges             FileTicketEdges `json:"edges"`
	host_file_tickets *int
}

// FileTicketEdges holds the relations/edges for other nodes in the graph.
type FileTicketEdges struct {
	// Files holds the value of the files edge.
	Files []*File
	// Hosts holds the value of the hosts edge.
	Hosts *Host
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e FileTicketEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[0] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// HostsOrErr returns the Hosts value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileTicketEdges) HostsOrErr() (*Host, error) {
	if e.loadedTypes[1] {
		if e.Hosts == nil {
			// The edge hosts was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: host.Label}
		}
		return e.Hosts, nil
	}
	return nil, &NotLoadedError{edge: "hosts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileTicket) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fileticket.FieldID:
			values[i] = &sql.NullInt64{}
		case fileticket.FieldOriginalFilename, fileticket.FieldIdentifier:
			values[i] = &sql.NullString{}
		case fileticket.FieldCreatedAt:
			values[i] = &sql.NullTime{}
		case fileticket.FieldUUID:
			values[i] = &uuid.UUID{}
		case fileticket.ForeignKeys[0]: // host_file_tickets
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type FileTicket", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileTicket fields.
func (ft *FileTicket) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fileticket.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ft.ID = int(value.Int64)
		case fileticket.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				ft.UUID = *value
			}
		case fileticket.FieldOriginalFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_filename", values[i])
			} else if value.Valid {
				ft.OriginalFilename = value.String
			}
		case fileticket.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				ft.Identifier = value.String
			}
		case fileticket.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ft.CreatedAt = value.Time
			}
		case fileticket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field host_file_tickets", value)
			} else if value.Valid {
				ft.host_file_tickets = new(int)
				*ft.host_file_tickets = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryFiles queries the "files" edge of the FileTicket entity.
func (ft *FileTicket) QueryFiles() *FileQuery {
	return (&FileTicketClient{config: ft.config}).QueryFiles(ft)
}

// QueryHosts queries the "hosts" edge of the FileTicket entity.
func (ft *FileTicket) QueryHosts() *HostQuery {
	return (&FileTicketClient{config: ft.config}).QueryHosts(ft)
}

// Update returns a builder for updating this FileTicket.
// Note that you need to call FileTicket.Unwrap() before calling this method if this FileTicket
// was returned from a transaction, and the transaction was committed or rolled back.
func (ft *FileTicket) Update() *FileTicketUpdateOne {
	return (&FileTicketClient{config: ft.config}).UpdateOne(ft)
}

// Unwrap unwraps the FileTicket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ft *FileTicket) Unwrap() *FileTicket {
	tx, ok := ft.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileTicket is not a transactional entity")
	}
	ft.config.driver = tx.drv
	return ft
}

// String implements the fmt.Stringer.
func (ft *FileTicket) String() string {
	var builder strings.Builder
	builder.WriteString("FileTicket(")
	builder.WriteString(fmt.Sprintf("id=%v", ft.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", ft.UUID))
	builder.WriteString(", original_filename=")
	builder.WriteString(ft.OriginalFilename)
	builder.WriteString(", identifier=")
	builder.WriteString(ft.Identifier)
	builder.WriteString(", created_at=")
	builder.WriteString(ft.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FileTickets is a parsable slice of FileTicket.
type FileTickets []*FileTicket

func (ft FileTickets) config(cfg config) {
	for _i := range ft {
		ft[_i].config = cfg
	}
}

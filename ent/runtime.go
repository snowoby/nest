// Code generated by entc, DO NOT EDIT.

package ent

import (
	"nest/ent/admin"
	"nest/ent/file"
	"nest/ent/fileticket"
	"nest/ent/host"
	"nest/ent/schema"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	adminFields := schema.Admin{}.Fields()
	_ = adminFields
	// adminDescName is the schema descriptor for name field.
	adminDescName := adminFields[1].Descriptor()
	// admin.NameValidator is a validator for the "name" field. It is called by the builders before save.
	admin.NameValidator = adminDescName.Validators[0].(func(string) error)
	fileFields := schema.File{}.Fields()
	_ = fileFields
	// fileDescUUID is the schema descriptor for uuid field.
	fileDescUUID := fileFields[0].Descriptor()
	// file.DefaultUUID holds the default value on creation for the uuid field.
	file.DefaultUUID = fileDescUUID.Default.(func() uuid.UUID)
	// fileDescMime is the schema descriptor for mime field.
	fileDescMime := fileFields[1].Descriptor()
	// file.DefaultMime holds the default value on creation for the mime field.
	file.DefaultMime = fileDescMime.Default.(string)
	// file.MimeValidator is a validator for the "mime" field. It is called by the builders before save.
	file.MimeValidator = fileDescMime.Validators[0].(func(string) error)
	// fileDescBucket is the schema descriptor for bucket field.
	fileDescBucket := fileFields[3].Descriptor()
	// file.BucketValidator is a validator for the "bucket" field. It is called by the builders before save.
	file.BucketValidator = fileDescBucket.Validators[0].(func(string) error)
	// fileDescDirectory is the schema descriptor for directory field.
	fileDescDirectory := fileFields[4].Descriptor()
	// file.DefaultDirectory holds the default value on creation for the directory field.
	file.DefaultDirectory = fileDescDirectory.Default.(string)
	fileticketFields := schema.FileTicket{}.Fields()
	_ = fileticketFields
	// fileticketDescUUID is the schema descriptor for uuid field.
	fileticketDescUUID := fileticketFields[0].Descriptor()
	// fileticket.DefaultUUID holds the default value on creation for the uuid field.
	fileticket.DefaultUUID = fileticketDescUUID.Default.(func() uuid.UUID)
	// fileticketDescOriginalFilename is the schema descriptor for original_filename field.
	fileticketDescOriginalFilename := fileticketFields[1].Descriptor()
	// fileticket.DefaultOriginalFilename holds the default value on creation for the original_filename field.
	fileticket.DefaultOriginalFilename = fileticketDescOriginalFilename.Default.(string)
	// fileticket.OriginalFilenameValidator is a validator for the "original_filename" field. It is called by the builders before save.
	fileticket.OriginalFilenameValidator = fileticketDescOriginalFilename.Validators[0].(func(string) error)
	// fileticketDescIdentifier is the schema descriptor for identifier field.
	fileticketDescIdentifier := fileticketFields[2].Descriptor()
	// fileticket.IdentifierValidator is a validator for the "identifier" field. It is called by the builders before save.
	fileticket.IdentifierValidator = fileticketDescIdentifier.Validators[0].(func(string) error)
	// fileticketDescCreatedAt is the schema descriptor for created_at field.
	fileticketDescCreatedAt := fileticketFields[3].Descriptor()
	// fileticket.DefaultCreatedAt holds the default value on creation for the created_at field.
	fileticket.DefaultCreatedAt = fileticketDescCreatedAt.Default.(func() time.Time)
	hostFields := schema.Host{}.Fields()
	_ = hostFields
	// hostDescToken is the schema descriptor for token field.
	hostDescToken := hostFields[0].Descriptor()
	// host.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	host.TokenValidator = hostDescToken.Validators[0].(func(string) error)
	// hostDescName is the schema descriptor for name field.
	hostDescName := hostFields[1].Descriptor()
	// host.NameValidator is a validator for the "name" field. It is called by the builders before save.
	host.NameValidator = hostDescName.Validators[0].(func(string) error)
}

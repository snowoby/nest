// Code generated by entc, DO NOT EDIT.

package file

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the file type in the database.
	Label = "file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldMime holds the string denoting the mime field in the database.
	FieldMime = "mime"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldBucket holds the string denoting the bucket field in the database.
	FieldBucket = "bucket"
	// FieldDirectory holds the string denoting the directory field in the database.
	FieldDirectory = "directory"

	// EdgeFileTickets holds the string denoting the file_tickets edge name in mutations.
	EdgeFileTickets = "file_tickets"

	// Table holds the table name of the file in the database.
	Table = "files"
	// FileTicketsTable is the table the holds the file_tickets relation/edge.
	FileTicketsTable = "files"
	// FileTicketsInverseTable is the table name for the FileTicket entity.
	// It exists in this package in order to avoid circular dependency with the "fileticket" package.
	FileTicketsInverseTable = "file_tickets"
	// FileTicketsColumn is the table column denoting the file_tickets relation/edge.
	FileTicketsColumn = "file_ticket_files"
)

// Columns holds all SQL columns for file fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldMime,
	FieldSize,
	FieldBucket,
	FieldDirectory,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the File type.
var ForeignKeys = []string{
	"file_ticket_files",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() uuid.UUID
	// DefaultMime holds the default value on creation for the "mime" field.
	DefaultMime string
	// MimeValidator is a validator for the "mime" field. It is called by the builders before save.
	MimeValidator func(string) error
	// BucketValidator is a validator for the "bucket" field. It is called by the builders before save.
	BucketValidator func(string) error
	// DefaultDirectory holds the default value on creation for the "directory" field.
	DefaultDirectory string
)

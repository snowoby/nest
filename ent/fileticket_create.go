// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nest/ent/file"
	"nest/ent/fileticket"
	"nest/ent/host"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// FileTicketCreate is the builder for creating a FileTicket entity.
type FileTicketCreate struct {
	config
	mutation *FileTicketMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (ftc *FileTicketCreate) SetUUID(u uuid.UUID) *FileTicketCreate {
	ftc.mutation.SetUUID(u)
	return ftc
}

// SetOriginalFilename sets the "original_filename" field.
func (ftc *FileTicketCreate) SetOriginalFilename(s string) *FileTicketCreate {
	ftc.mutation.SetOriginalFilename(s)
	return ftc
}

// SetNillableOriginalFilename sets the "original_filename" field if the given value is not nil.
func (ftc *FileTicketCreate) SetNillableOriginalFilename(s *string) *FileTicketCreate {
	if s != nil {
		ftc.SetOriginalFilename(*s)
	}
	return ftc
}

// SetIdentifier sets the "identifier" field.
func (ftc *FileTicketCreate) SetIdentifier(s string) *FileTicketCreate {
	ftc.mutation.SetIdentifier(s)
	return ftc
}

// SetCreatedAt sets the "created_at" field.
func (ftc *FileTicketCreate) SetCreatedAt(t time.Time) *FileTicketCreate {
	ftc.mutation.SetCreatedAt(t)
	return ftc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ftc *FileTicketCreate) SetNillableCreatedAt(t *time.Time) *FileTicketCreate {
	if t != nil {
		ftc.SetCreatedAt(*t)
	}
	return ftc
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (ftc *FileTicketCreate) AddFileIDs(ids ...int) *FileTicketCreate {
	ftc.mutation.AddFileIDs(ids...)
	return ftc
}

// AddFiles adds the "files" edges to the File entity.
func (ftc *FileTicketCreate) AddFiles(f ...*File) *FileTicketCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ftc.AddFileIDs(ids...)
}

// SetHostsID sets the "hosts" edge to the Host entity by ID.
func (ftc *FileTicketCreate) SetHostsID(id int) *FileTicketCreate {
	ftc.mutation.SetHostsID(id)
	return ftc
}

// SetNillableHostsID sets the "hosts" edge to the Host entity by ID if the given value is not nil.
func (ftc *FileTicketCreate) SetNillableHostsID(id *int) *FileTicketCreate {
	if id != nil {
		ftc = ftc.SetHostsID(*id)
	}
	return ftc
}

// SetHosts sets the "hosts" edge to the Host entity.
func (ftc *FileTicketCreate) SetHosts(h *Host) *FileTicketCreate {
	return ftc.SetHostsID(h.ID)
}

// Mutation returns the FileTicketMutation object of the builder.
func (ftc *FileTicketCreate) Mutation() *FileTicketMutation {
	return ftc.mutation
}

// Save creates the FileTicket in the database.
func (ftc *FileTicketCreate) Save(ctx context.Context) (*FileTicket, error) {
	var (
		err  error
		node *FileTicket
	)
	ftc.defaults()
	if len(ftc.hooks) == 0 {
		if err = ftc.check(); err != nil {
			return nil, err
		}
		node, err = ftc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileTicketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ftc.check(); err != nil {
				return nil, err
			}
			ftc.mutation = mutation
			node, err = ftc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ftc.hooks) - 1; i >= 0; i-- {
			mut = ftc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ftc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ftc *FileTicketCreate) SaveX(ctx context.Context) *FileTicket {
	v, err := ftc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ftc *FileTicketCreate) defaults() {
	if _, ok := ftc.mutation.UUID(); !ok {
		v := fileticket.DefaultUUID()
		ftc.mutation.SetUUID(v)
	}
	if _, ok := ftc.mutation.OriginalFilename(); !ok {
		v := fileticket.DefaultOriginalFilename
		ftc.mutation.SetOriginalFilename(v)
	}
	if _, ok := ftc.mutation.CreatedAt(); !ok {
		v := fileticket.DefaultCreatedAt()
		ftc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftc *FileTicketCreate) check() error {
	if _, ok := ftc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := ftc.mutation.OriginalFilename(); !ok {
		return &ValidationError{Name: "original_filename", err: errors.New("ent: missing required field \"original_filename\"")}
	}
	if v, ok := ftc.mutation.OriginalFilename(); ok {
		if err := fileticket.OriginalFilenameValidator(v); err != nil {
			return &ValidationError{Name: "original_filename", err: fmt.Errorf("ent: validator failed for field \"original_filename\": %w", err)}
		}
	}
	if _, ok := ftc.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New("ent: missing required field \"identifier\"")}
	}
	if v, ok := ftc.mutation.Identifier(); ok {
		if err := fileticket.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf("ent: validator failed for field \"identifier\": %w", err)}
		}
	}
	if _, ok := ftc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (ftc *FileTicketCreate) sqlSave(ctx context.Context) (*FileTicket, error) {
	_node, _spec := ftc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ftc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ftc *FileTicketCreate) createSpec() (*FileTicket, *sqlgraph.CreateSpec) {
	var (
		_node = &FileTicket{config: ftc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fileticket.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fileticket.FieldID,
			},
		}
	)
	if value, ok := ftc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fileticket.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := ftc.mutation.OriginalFilename(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileticket.FieldOriginalFilename,
		})
		_node.OriginalFilename = value
	}
	if value, ok := ftc.mutation.Identifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileticket.FieldIdentifier,
		})
		_node.Identifier = value
	}
	if value, ok := ftc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileticket.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := ftc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileticket.FilesTable,
			Columns: []string{fileticket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ftc.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileticket.HostsTable,
			Columns: []string{fileticket.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FileTicketCreateBulk is the builder for creating many FileTicket entities in bulk.
type FileTicketCreateBulk struct {
	config
	builders []*FileTicketCreate
}

// Save creates the FileTicket entities in the database.
func (ftcb *FileTicketCreateBulk) Save(ctx context.Context) ([]*FileTicket, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ftcb.builders))
	nodes := make([]*FileTicket, len(ftcb.builders))
	mutators := make([]Mutator, len(ftcb.builders))
	for i := range ftcb.builders {
		func(i int, root context.Context) {
			builder := ftcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileTicketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ftcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ftcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ftcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ftcb *FileTicketCreateBulk) SaveX(ctx context.Context) []*FileTicket {
	v, err := ftcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"nest/ent/file"
	"nest/ent/fileticket"
	"nest/ent/host"
	"nest/ent/predicate"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// FileTicketUpdate is the builder for updating FileTicket entities.
type FileTicketUpdate struct {
	config
	hooks    []Hook
	mutation *FileTicketMutation
}

// Where adds a new predicate for the FileTicketUpdate builder.
func (ftu *FileTicketUpdate) Where(ps ...predicate.FileTicket) *FileTicketUpdate {
	ftu.mutation.predicates = append(ftu.mutation.predicates, ps...)
	return ftu
}

// SetUUID sets the "uuid" field.
func (ftu *FileTicketUpdate) SetUUID(u uuid.UUID) *FileTicketUpdate {
	ftu.mutation.SetUUID(u)
	return ftu
}

// SetOriginalFilename sets the "original_filename" field.
func (ftu *FileTicketUpdate) SetOriginalFilename(s string) *FileTicketUpdate {
	ftu.mutation.SetOriginalFilename(s)
	return ftu
}

// SetNillableOriginalFilename sets the "original_filename" field if the given value is not nil.
func (ftu *FileTicketUpdate) SetNillableOriginalFilename(s *string) *FileTicketUpdate {
	if s != nil {
		ftu.SetOriginalFilename(*s)
	}
	return ftu
}

// SetIdentifier sets the "identifier" field.
func (ftu *FileTicketUpdate) SetIdentifier(s string) *FileTicketUpdate {
	ftu.mutation.SetIdentifier(s)
	return ftu
}

// SetCreatedAt sets the "created_at" field.
func (ftu *FileTicketUpdate) SetCreatedAt(t time.Time) *FileTicketUpdate {
	ftu.mutation.SetCreatedAt(t)
	return ftu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ftu *FileTicketUpdate) SetNillableCreatedAt(t *time.Time) *FileTicketUpdate {
	if t != nil {
		ftu.SetCreatedAt(*t)
	}
	return ftu
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (ftu *FileTicketUpdate) AddFileIDs(ids ...int) *FileTicketUpdate {
	ftu.mutation.AddFileIDs(ids...)
	return ftu
}

// AddFiles adds the "files" edges to the File entity.
func (ftu *FileTicketUpdate) AddFiles(f ...*File) *FileTicketUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ftu.AddFileIDs(ids...)
}

// SetHostsID sets the "hosts" edge to the Host entity by ID.
func (ftu *FileTicketUpdate) SetHostsID(id int) *FileTicketUpdate {
	ftu.mutation.SetHostsID(id)
	return ftu
}

// SetNillableHostsID sets the "hosts" edge to the Host entity by ID if the given value is not nil.
func (ftu *FileTicketUpdate) SetNillableHostsID(id *int) *FileTicketUpdate {
	if id != nil {
		ftu = ftu.SetHostsID(*id)
	}
	return ftu
}

// SetHosts sets the "hosts" edge to the Host entity.
func (ftu *FileTicketUpdate) SetHosts(h *Host) *FileTicketUpdate {
	return ftu.SetHostsID(h.ID)
}

// Mutation returns the FileTicketMutation object of the builder.
func (ftu *FileTicketUpdate) Mutation() *FileTicketMutation {
	return ftu.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (ftu *FileTicketUpdate) ClearFiles() *FileTicketUpdate {
	ftu.mutation.ClearFiles()
	return ftu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (ftu *FileTicketUpdate) RemoveFileIDs(ids ...int) *FileTicketUpdate {
	ftu.mutation.RemoveFileIDs(ids...)
	return ftu
}

// RemoveFiles removes "files" edges to File entities.
func (ftu *FileTicketUpdate) RemoveFiles(f ...*File) *FileTicketUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ftu.RemoveFileIDs(ids...)
}

// ClearHosts clears the "hosts" edge to the Host entity.
func (ftu *FileTicketUpdate) ClearHosts() *FileTicketUpdate {
	ftu.mutation.ClearHosts()
	return ftu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ftu *FileTicketUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ftu.hooks) == 0 {
		if err = ftu.check(); err != nil {
			return 0, err
		}
		affected, err = ftu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileTicketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ftu.check(); err != nil {
				return 0, err
			}
			ftu.mutation = mutation
			affected, err = ftu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ftu.hooks) - 1; i >= 0; i-- {
			mut = ftu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ftu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ftu *FileTicketUpdate) SaveX(ctx context.Context) int {
	affected, err := ftu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ftu *FileTicketUpdate) Exec(ctx context.Context) error {
	_, err := ftu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftu *FileTicketUpdate) ExecX(ctx context.Context) {
	if err := ftu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftu *FileTicketUpdate) check() error {
	if v, ok := ftu.mutation.OriginalFilename(); ok {
		if err := fileticket.OriginalFilenameValidator(v); err != nil {
			return &ValidationError{Name: "original_filename", err: fmt.Errorf("ent: validator failed for field \"original_filename\": %w", err)}
		}
	}
	if v, ok := ftu.mutation.Identifier(); ok {
		if err := fileticket.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf("ent: validator failed for field \"identifier\": %w", err)}
		}
	}
	return nil
}

func (ftu *FileTicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fileticket.Table,
			Columns: fileticket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fileticket.FieldID,
			},
		},
	}
	if ps := ftu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fileticket.FieldUUID,
		})
	}
	if value, ok := ftu.mutation.OriginalFilename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileticket.FieldOriginalFilename,
		})
	}
	if value, ok := ftu.mutation.Identifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileticket.FieldIdentifier,
		})
	}
	if value, ok := ftu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileticket.FieldCreatedAt,
		})
	}
	if ftu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileticket.FilesTable,
			Columns: []string{fileticket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !ftu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileticket.FilesTable,
			Columns: []string{fileticket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileticket.FilesTable,
			Columns: []string{fileticket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ftu.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileticket.HostsTable,
			Columns: []string{fileticket.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftu.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileticket.HostsTable,
			Columns: []string{fileticket.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ftu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileticket.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FileTicketUpdateOne is the builder for updating a single FileTicket entity.
type FileTicketUpdateOne struct {
	config
	hooks    []Hook
	mutation *FileTicketMutation
}

// SetUUID sets the "uuid" field.
func (ftuo *FileTicketUpdateOne) SetUUID(u uuid.UUID) *FileTicketUpdateOne {
	ftuo.mutation.SetUUID(u)
	return ftuo
}

// SetOriginalFilename sets the "original_filename" field.
func (ftuo *FileTicketUpdateOne) SetOriginalFilename(s string) *FileTicketUpdateOne {
	ftuo.mutation.SetOriginalFilename(s)
	return ftuo
}

// SetNillableOriginalFilename sets the "original_filename" field if the given value is not nil.
func (ftuo *FileTicketUpdateOne) SetNillableOriginalFilename(s *string) *FileTicketUpdateOne {
	if s != nil {
		ftuo.SetOriginalFilename(*s)
	}
	return ftuo
}

// SetIdentifier sets the "identifier" field.
func (ftuo *FileTicketUpdateOne) SetIdentifier(s string) *FileTicketUpdateOne {
	ftuo.mutation.SetIdentifier(s)
	return ftuo
}

// SetCreatedAt sets the "created_at" field.
func (ftuo *FileTicketUpdateOne) SetCreatedAt(t time.Time) *FileTicketUpdateOne {
	ftuo.mutation.SetCreatedAt(t)
	return ftuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ftuo *FileTicketUpdateOne) SetNillableCreatedAt(t *time.Time) *FileTicketUpdateOne {
	if t != nil {
		ftuo.SetCreatedAt(*t)
	}
	return ftuo
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (ftuo *FileTicketUpdateOne) AddFileIDs(ids ...int) *FileTicketUpdateOne {
	ftuo.mutation.AddFileIDs(ids...)
	return ftuo
}

// AddFiles adds the "files" edges to the File entity.
func (ftuo *FileTicketUpdateOne) AddFiles(f ...*File) *FileTicketUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ftuo.AddFileIDs(ids...)
}

// SetHostsID sets the "hosts" edge to the Host entity by ID.
func (ftuo *FileTicketUpdateOne) SetHostsID(id int) *FileTicketUpdateOne {
	ftuo.mutation.SetHostsID(id)
	return ftuo
}

// SetNillableHostsID sets the "hosts" edge to the Host entity by ID if the given value is not nil.
func (ftuo *FileTicketUpdateOne) SetNillableHostsID(id *int) *FileTicketUpdateOne {
	if id != nil {
		ftuo = ftuo.SetHostsID(*id)
	}
	return ftuo
}

// SetHosts sets the "hosts" edge to the Host entity.
func (ftuo *FileTicketUpdateOne) SetHosts(h *Host) *FileTicketUpdateOne {
	return ftuo.SetHostsID(h.ID)
}

// Mutation returns the FileTicketMutation object of the builder.
func (ftuo *FileTicketUpdateOne) Mutation() *FileTicketMutation {
	return ftuo.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (ftuo *FileTicketUpdateOne) ClearFiles() *FileTicketUpdateOne {
	ftuo.mutation.ClearFiles()
	return ftuo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (ftuo *FileTicketUpdateOne) RemoveFileIDs(ids ...int) *FileTicketUpdateOne {
	ftuo.mutation.RemoveFileIDs(ids...)
	return ftuo
}

// RemoveFiles removes "files" edges to File entities.
func (ftuo *FileTicketUpdateOne) RemoveFiles(f ...*File) *FileTicketUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ftuo.RemoveFileIDs(ids...)
}

// ClearHosts clears the "hosts" edge to the Host entity.
func (ftuo *FileTicketUpdateOne) ClearHosts() *FileTicketUpdateOne {
	ftuo.mutation.ClearHosts()
	return ftuo
}

// Save executes the query and returns the updated FileTicket entity.
func (ftuo *FileTicketUpdateOne) Save(ctx context.Context) (*FileTicket, error) {
	var (
		err  error
		node *FileTicket
	)
	if len(ftuo.hooks) == 0 {
		if err = ftuo.check(); err != nil {
			return nil, err
		}
		node, err = ftuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileTicketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ftuo.check(); err != nil {
				return nil, err
			}
			ftuo.mutation = mutation
			node, err = ftuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ftuo.hooks) - 1; i >= 0; i-- {
			mut = ftuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ftuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ftuo *FileTicketUpdateOne) SaveX(ctx context.Context) *FileTicket {
	node, err := ftuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ftuo *FileTicketUpdateOne) Exec(ctx context.Context) error {
	_, err := ftuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftuo *FileTicketUpdateOne) ExecX(ctx context.Context) {
	if err := ftuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftuo *FileTicketUpdateOne) check() error {
	if v, ok := ftuo.mutation.OriginalFilename(); ok {
		if err := fileticket.OriginalFilenameValidator(v); err != nil {
			return &ValidationError{Name: "original_filename", err: fmt.Errorf("ent: validator failed for field \"original_filename\": %w", err)}
		}
	}
	if v, ok := ftuo.mutation.Identifier(); ok {
		if err := fileticket.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf("ent: validator failed for field \"identifier\": %w", err)}
		}
	}
	return nil
}

func (ftuo *FileTicketUpdateOne) sqlSave(ctx context.Context) (_node *FileTicket, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fileticket.Table,
			Columns: fileticket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fileticket.FieldID,
			},
		},
	}
	id, ok := ftuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FileTicket.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ftuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fileticket.FieldUUID,
		})
	}
	if value, ok := ftuo.mutation.OriginalFilename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileticket.FieldOriginalFilename,
		})
	}
	if value, ok := ftuo.mutation.Identifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fileticket.FieldIdentifier,
		})
	}
	if value, ok := ftuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fileticket.FieldCreatedAt,
		})
	}
	if ftuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileticket.FilesTable,
			Columns: []string{fileticket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !ftuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileticket.FilesTable,
			Columns: []string{fileticket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileticket.FilesTable,
			Columns: []string{fileticket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ftuo.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileticket.HostsTable,
			Columns: []string{fileticket.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ftuo.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileticket.HostsTable,
			Columns: []string{fileticket.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileTicket{config: ftuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ftuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileticket.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
